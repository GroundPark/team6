package product.dao;

import static product.db.JdbcUtil.*;	
import java.util.*;
import java.sql.*;
import product.dao.*;
import product.vo.*;

public class ProductDao {
	private static ProductDao productDao;
	private Connection conn;
	
	private ProductDao() {}
	// 외부에서 함부로 인스턴스 생성하지 못하게 private로 생성자를 선언함
	
	public static ProductDao getInstance() {
	// 싱글톤 방식
		if (productDao == null)	productDao = new ProductDao();
		return productDao;
	}
	
	public void setConnection(Connection conn) {
		this.conn = conn;
	}
	
	public int getPdtCount(String where) {
	// 검색된 상품의 전체 개수를 리턴하는 메소드
		Statement stmt = null;
		ResultSet rs = null;
		int rcnt = 0;
		
		try {
			stmt = conn.createStatement();
			String sql = "select count(*) from t_product_info a, t_pdt_cata b " + where;
			rs = stmt.executeQuery(sql);
			
			rs.next();
			rcnt = rs.getInt(1);
			
		}catch(Exception e) {
			System.out.println("productDao : getPdtCount() 메소드 오류");			
			e.printStackTrace();
		}finally {
			close(rs);	close(stmt);
		}
		
		return rcnt;
	}
	
	public ArrayList<ProductInfo> getPdtList(String where, String order, int cpage, int psize){
		Statement stmt = null;
		ResultSet rs = null;
		ArrayList<ProductInfo> pdtList = new ArrayList<ProductInfo>();	
		ProductInfo pdt = null;
		
		try {
			String sql = "select a.*, b.pc_id, b.pc_name from t_product_info a, t_pdt_cata b " +
							where + order + " limit " + ((cpage - 1) * psize) + ", " + psize;
		stmt = conn.createStatement();
		rs = stmt.executeQuery(sql);
		
		while (rs.next()) {				// AL이므로 while 가능
			pdt = new ProductInfo();	// AL에 저장할 NoticeList형 인스턴스 생성		
			pdt.setPi_idx(rs.getInt("pi_idx"));
            pdt.setPi_id(rs.getString("pi_id"));
            pdt.setPc_id(rs.getString("pc_id"));
            pdt.setPi_name(rs.getString("pi_name"));
            pdt.setPi_price(rs.getInt("pi_price"));
            pdt.setPi_discount(rs.getDouble("pi_discount"));
            pdt.setPi_img1(rs.getString("pi_img1"));
            pdt.setPi_img2(rs.getString("pi_img2"));
            pdt.setPi_img3(rs.getString("pi_img3"));
            pdt.setPi_desc(rs.getString("pi_desc"));
            pdt.setPi_stock(rs.getInt("pi_stock"));
            pdt.setPi_good(rs.getInt("pi_good"));
            pdt.setPi_salecnt(rs.getInt("pi_salecnt"));
            pdt.setPi_review(rs.getInt("pi_review"));
            pdt.setPi_score(rs.getDouble("pi_score"));
            pdt.setPi_isview(rs.getString("pi_isview"));
            pdt.setPi_date(rs.getString("pi_date"));
            pdt.setAi_idx(rs.getInt("ai_idx"));
           
            pdt.setPc_name(rs.getString("pc_name"));
 
			// 받아온 컬럼들의 값을 pdt 인스턴스에 저장 
			pdtList.add(pdt);
			}
			// 하나의 상품 정보를 담은 인스턴스 pdt를 pdtList에 저장
			}catch(Exception e) {
				System.out.println("productDao : getPdtList() 메소드 오류");			
				e.printStackTrace();
			}finally {
				close(rs);	close(stmt);
			}
		return pdtList;
	}
		
	
	
	
	
		
	
	
	public ArrayList<PdtCataBig> getCataBigList(){
		Statement stmt = null;
		ResultSet rs = null;
		ArrayList<PdtCataBig> cataBigList = new ArrayList<PdtCataBig>();	
		PdtCataBig cata = null;
		
		try {
			String sql = "select * from t_pdt_cata_big";
		stmt = conn.createStatement();
		rs = stmt.executeQuery(sql);
		
		while (rs.next()) {				// AL이므로 while 가능
			cata = new PdtCataBig();
            
			cata.setPcb_id(rs.getString("pcb_id"));
			cata.setPcb_name(rs.getString("pcb_name"));

			cataBigList.add(cata);
			}
			}catch(Exception e) {
				System.out.println("productDao : getCataBigList() 메소드 오류");			
				e.printStackTrace();
			}finally {
				close(rs);	close(stmt);
			}
			return cataBigList;
		}
		
	
	
	public ArrayList<PdtCataSmall> getCataSmallList(){
		Statement stmt = null;
		ResultSet rs = null;
		ArrayList<PdtCataSmall> cataSmallList = new ArrayList<PdtCataSmall>();	
		PdtCataSmall cata = null;
		
		try {
			String sql = "select * from t_pdt_cata_small";
		stmt = conn.createStatement();
		rs = stmt.executeQuery(sql);
		
		while (rs.next()) {				// AL이므로 while 가능
			cata = new PdtCataSmall();
            
			cata.setPcs_id(rs.getString("pcs_id"));
			cata.setPcb_id(rs.getString("pcb_id"));
			cata.setPcs_name(rs.getString("pcs_name"));
			
			cataSmallList.add(cata);
			}
			}catch(Exception e) {
				System.out.println("productDao : getCataSmallList() 메소드 오류");			
				e.printStackTrace();
			}finally {
				close(rs);	close(stmt);
		}
		return cataSmallList;
	}
	
	
	public ArrayList<PdtBrandInfo> getBrandInfoList(){
		Statement stmt = null;
		ResultSet rs = null;
		ArrayList<PdtBrandInfo> brandInfoList = new ArrayList<PdtBrandInfo>();	
		PdtBrandInfo brand = null;
		
		try {
			String sql = "select * from t_pdt_brand";
		stmt = conn.createStatement();
		rs = stmt.executeQuery(sql);
		
		while (rs.next()) {				
			brand = new PdtBrandInfo();   
			brand.setPb_id(rs.getString("pb_id"));
			brand.setPb_name(rs.getString("pb_name"));
			brandInfoList.add(brand);
			}
			}catch(Exception e) {
				System.out.println("productDao : getBrandInfoList() 메소드 오류");			
				e.printStackTrace();
			}finally {
				close(rs);	close(stmt);
		}
		return brandInfoList;
	}
	
}
