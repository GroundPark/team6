package challenge.dao;

import static challenge.db.JdbcUtil.*;		
import java.util.*;
import javax.sql.*;
import java.sql.*;
import vo.*;

public class ChallengeGoodDao {
	private static ChallengeGoodDao challengeGoodInDao;
	private Connection conn;
	
	private ChallengeGoodDao() {}
	public static ChallengeGoodDao getInstance() {
	// singleton
		if(challengeGoodInDao == null)		challengeGoodInDao = new ChallengeGoodDao();
		return challengeGoodInDao;
	}
	
	public void setConnection(Connection conn) {
		this.conn = conn;
	}
	
	public int challengeGoodInsert(ChallengeGoodList challengeGood) {
		Statement stmt = null, stmt2 = null;
		ResultSet rs = null;
		int result = 0;
		int cIdx = 1;		// 도전펀딩 idx

		try {
			// 마지막 댓글의 idx + 1한 곳에...
			stmt = conn.createStatement();
			String sql = "select max(cg_idx) + 1 from t_challenge_good where cg_idx = " 
						+ challengeGood.getCg_idx();
			rs = stmt.executeQuery(sql);	
			if(rs.next()) cIdx = rs.getInt(1);	
		
			// cg_history에 값을 줘서 기록을 남긴다...
			sql = "insert into t_challenge_good (cg_idx, mi_id, ci_idx, cg_history) values ( " 
					+ cIdx + ", '" 
					+ challengeGood.getMi_id() + "' , "
					+ challengeGood.getCi_idx() + " , "
					+ 1 + ") ";
					// + challengeGood.getCg_history() + ") ";
			result = stmt.executeUpdate(sql);
			
			// 또한 ci_good에 +1하는 쿼리도 날려야 한다
			stmt2 = conn.createStatement();
			sql = "update t_challenge_info set ci_good = ci_good + 1 where ci_idx = " + challengeGood.getCi_idx();
			System.out.println(sql);		
			result = stmt.executeUpdate(sql);
			
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			close(rs);		
			close(stmt);
			close(stmt2);
		}
		
		return result;
	}
	
	public int challengeGoodCancel(ChallengeGoodList challengeGood) {
		Statement stmt = null, stmt2 = null;
		ResultSet rs = null;
		int result = 0;
		int cIdx = 1;		// 도전펀딩 idx

		try {
			// 마지막 댓글의 idx + 1한 곳에...
			stmt = conn.createStatement();
			String sql = "select max(cg_idx) + 1 from t_challenge_good where cg_idx = " 
						+ challengeGood.getCg_idx();
			rs = stmt.executeQuery(sql);	
			if(rs.next()) cIdx = rs.getInt(1);	
		
			// cg_history에 값을 줘서 기록을 남긴다...
			sql = "insert into t_challenge_good (cg_idx, mi_id, ci_idx, cg_history) values ( " 
					+ cIdx + ", '" 
					+ challengeGood.getMi_id() + "' , "
					+ challengeGood.getCi_idx() + " , "
					+ 0 + ") ";
					// + challengeGood.getCg_history() + ") ";
			result = stmt.executeUpdate(sql);
			
			// 또한 ci_good에 -1하는 쿼리도 날려야 한다
			stmt2 = conn.createStatement();
			sql = "update t_challenge_info set ci_good = ci_good - 1 where ci_idx = " + challengeGood.getCi_idx();
			System.out.println(sql);		
			result = stmt.executeUpdate(sql);
			
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			close(rs);		
			close(stmt);
			close(stmt2);
		}
		
		return result;
	}
	
	public int getChallengeGoodable(int idx, String miid, ChallengeGoodList challengeGood) {
		Statement stmt = null;
		ResultSet rs = null;
		int result = 0;
		String sql = "";

		try {
			// 좋아요 여부 구하기
			sql = "select cg_history from t_challenge_good where ci_idx = " 
					+ challengeGood.getCi_idx() 
					+ " and mi_id = '" + challengeGood.getMi_id() 
					+ "' order by cg_idx desc limit 1 ";
			stmt = conn.createStatement();
			System.out.println("좋아요 여부" + sql);
			 rs = stmt.executeQuery(sql); 	
			 
			 if (rs.wasNull()) {
				 result = 0;				// null 이면 0 (즉, 기본값)
			 }else if (rs.next()) {
				 result = rs.getInt(1);		// 0 또는 1을 적절하게 가져옴
			 }
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			close(rs);		
			close(stmt);
		}
		
		return result;
	}
	
}